#!/bin/bash
#
# Install packages based on the detected operating system.
#
########################################################################################
####[ Global Variables ]################################################################


C_YELLOW="$(printf '\033[1;33m')"
C_GREEN="$(printf '\033[0;32m')"
C_BLUE="$(printf '\033[0;34m')"
C_CYAN="$(printf '\033[0;36m')"
C_RED="$(printf '\033[1;31m')"
C_NC="$(printf '\033[0m')"
readonly C_GREEN C_BLUE C_CYAN C_RED C_NC

readonly C_SUCCESS="${C_GREEN}==>${C_NC} "
readonly C_WARNING="${C_YELLOW}==>${C_NC} "
readonly C_ERROR="${C_RED}ERROR:${C_NC} "
readonly C_INFO="${C_BLUE}==>${C_NC} "
readonly C_NOTE="${C_CYAN}==>${C_NC} "

# Global variable for caching installed packages.
installed_packages=""


####[ Functions ]########################################################################


# install_from_cache:
#   Checks the global installed_packages cache for the package.
#   If not found, it runs the provided install command.
#   Upon a successful installation, it appends the package to the cache.
install_from_cache() {
    local pkg="$1"
    local install_cmd="$2"

    if grep -Fxq "$pkg" <<< "$installed_packages"; then
        echo "${C_NOTE}  '$pkg' is already installed"
    else
        echo "${C_INFO}  Installing '$pkg'..."
        if eval "$install_cmd"; then
            # Update the cache so subsequent checks see this package as installed.
            installed_packages+=$'\n'"$pkg"
        else
            echo "${C_ERROR}  Installation of '$pkg' failed."
        fi
    fi
}


####[ Main ]############################################################################


case "{{ .chezmoi.os }}" in
    linux)
        if command -v pacman >/dev/null; then
            echo "${C_INFO}Updating package lists..."
            sudo pacman -Syu --noconfirm

            echo "${C_INFO}Retrieving installed packages..."
            installed_packages="$(pacman -Qq)"

            echo "${C_INFO}Installing general packages..."
            {{- range .packages.linux.general }}
            install_from_cache "{{ . }}" "sudo pacman -S --noconfirm --needed '{{ . }}'"
            {{- end }}

            echo "${C_INFO}Installing pacman-specific packages..."
            {{- range .packages.linux.pacman }}
            install_from_cache "{{ . }}" "sudo pacman -S --noconfirm --needed '{{ . }}'"
            {{- end }}
        elif command -v apt >/dev/null; then
            echo "${C_INFO}Updating package lists..."
            sudo apt-get update

            echo "${C_INFO}Retrieving installed packages..."
            installed_packages="$(dpkg-query -W -f='${binary:Package}\n')"

            echo "${C_INFO}Installing general packages..."
            {{- range .packages.linux.general }}
            install_from_cache "{{ . }}" "sudo apt-get install -y '{{ . }}'"
            {{- end }}

            echo "${C_INFO}Installing apt-specific packages..."
            {{- range .packages.linux.apt }}
            install_from_cache "{{ . }}" "sudo apt-get install -y '{{ . }}'"
            {{- end }}
        fi
        ;;

    darwin)
        echo "${C_INFO}Retrieving installed Homebrew formulas..."
        installed_packages="$(brew list --formula)"

        echo "${C_INFO}Installing Homebrew formulas..."
        {{- range .packages.macos.homebrew.formulas }}
        install_from_cache "{{ . }}" "brew install '{{ . }}'"
        {{- end }}

        echo "${C_INFO}Installing Homebrew casks..."
        {{- range .packages.macos.homebrew.casks }}
        install_from_cache "{{ . }}" "brew install --cask '{{ . }}'"
        {{- end }}
        ;;

    *)
        echo "${C_ERROR}Unsupported operating system: {{ .chezmoi.os }}"
        exit 1
        ;;
esac

echo "${C_SUCCESS}Package installation complete"
