#!/usr/bin/env bash
#
# Automatically install and update vim-plug plugins for Neovim. This script runs when Neovim
# config files change OR when plugins haven't been updated recently.
#
# Hash of Neovim config files for change detection:
# init.vim hash: {{ include "private_dot_config/nvim/init.vim" | sha256sum }}
# second_init.lua hash: {{ include "private_dot_config/nvim/second_init.lua" | sha256sum }}
#
############################################################################################
####[ Global Variables ]####################################################################


C_GREEN="$(printf '\033[0;32m')"
C_BLUE="$(printf '\033[0;34m')"
C_CYAN="$(printf '\033[0;36m')"
C_RED="$(printf '\033[1;31m')"
C_YELLOW="$(printf '\033[1;33m')"
C_NC="$(printf '\033[0m')"
readonly C_GREEN C_BLUE C_CYAN C_RED C_YELLOW C_NC

readonly C_SUCCESS="${C_GREEN}==>${C_NC} "
readonly C_ERROR="${C_RED}ERROR:${C_NC} "
readonly C_INFO="${C_BLUE}==>${C_NC} "
readonly C_NOTE="${C_CYAN}==>${C_NC} "
readonly C_WARNING="${C_YELLOW}==>${C_NC} "

# Path to file that tracks the last plugin update time.
readonly C_UPDATE_MARKER="${XDG_DATA_HOME:-$HOME/.local/share}/nvim/last_plugin_update"
# Number of days after which plugins should be updated.
readonly C_UPDATE_INTERVAL_DAYS=7


####[ Functions ]###########################################################################


####
# Install vim-plug if not already installed.
#
# NOTE:
#   vim-plug should already be installed as a result of '.chezmoiexternal.toml' configs.
#   This function is a safeguard to ensure it exists.
#
# RETURNS:
#   - 0: vim-plug installed successfully or already exists.
#   - 1: Failed to install vim-plug.
install_vim_plug() {
    local plug_path="${XDG_DATA_HOME:-$HOME/.local/share}/nvim/site/autoload/plug.vim"

    if [[ ! -f "$plug_path" ]]; then
        echo "${C_INFO}Installing vim-plug..."
        curl -fLo "$plug_path" --create-dirs \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

        if [[ $? -eq 0 ]]; then
            echo "${C_SUCCESS}vim-plug installed successfully"
        else
            echo "${C_ERROR}Failed to install vim-plug"
            return 1
        fi
    else
        echo "${C_NOTE}vim-plug is already installed"
    fi

    return 0
}

####
# Check if plugins need updating based on time.
#
# RETURNS:
#   - 0: Plugins should be updated (either no marker or outdated).
#   - 1: Plugins are up-to-date (marker exists and is recent).
should_update_plugins() {
    if [[ ! -f "$C_UPDATE_MARKER" ]]; then
        echo "${C_INFO}No previous update marker found, updating plugins..."
        return 0
    fi

{{- if eq .chezmoi.os "darwin" -}}
    local last_update_time=$(stat -f %m "$C_UPDATE_MARKER")
{{- else if eq .chezmoi.os "linux" -}}
    local last_update_time=$(stat -c %Y "$C_UPDATE_MARKER")
{{- end -}}

    local current_time=$(date +%s)
    local time_diff=$((current_time - last_update_time))
    local days_since_update=$((time_diff / 86400))

    if (( days_since_update >= C_UPDATE_INTERVAL_DAYS )); then
        echo "${C_INFO}Plugins last updated $days_since_update days ago, updating..."
        return 0
    else
        echo "${C_NOTE}Plugins were updated $days_since_update days ago, skipping update"
        return 1
    fi
}

####
# Install and update vim plugins using vim-plug.
#
# RETURNS:
#   - 0: Plugins installed/updated successfully.
#   - 1: Failed to install/update plugins.
update_vim_plugins() {
    echo "${C_INFO}Installing/updating Neovim plugins..."

    # Run PlugInstall and PlugUpdate in headless mode
    if nvim --headless +PlugInstall +PlugUpdate +qall 2>/dev/null; then
        echo "${C_SUCCESS}Neovim plugins installed/updated successfully"
        # Create/update the marker file
        mkdir -p "$(dirname "$C_UPDATE_MARKER")"
        touch "$C_UPDATE_MARKER"
        echo "$(date +%Y-%m-%dT%H:%M:%S)" > "$C_UPDATE_MARKER"
        return 0
    else
        echo "${C_ERROR}Failed to install/update some Neovim plugins"
        return 1
    fi
}


####[ Main ]################################################################################


echo "${C_INFO}Checking Neovim plugins..."

if ! command -v nvim &>/dev/null; then
    echo "${C_WARNING}Neovim is not installed. Skipping plugin installation."
    exit 0
fi

if ! install_vim_plug; then
    exit 1
fi

if should_update_plugins; then
    if ! update_vim_plugins; then
        exit 1
    fi
else
    echo "${C_NOTE}Skipping plugin update (run within $C_UPDATE_INTERVAL_DAYS days)"
fi

echo "${C_SUCCESS}Neovim plugin check completed!"
